VERSION 0.49.0 (released in 2013-09-21)
This is an enhancement release.
--------------------------------------------------------------------------------
ENHANCEMENT:
  Initial support for pluggable behaviours, through a plugin architecture
  (package org.dihedron.strutlets.plugin) and some supporting classes.
  Now, the framework does not depend on JBoss classes, all dependecies have been
  moved to plugin projects. 
================================================================================ 
VERSION 0.48.0 (released in 2013-09-21)
This is an enhancement release.
--------------------------------------------------------------------------------
ENHANCEMENT:
  The initial support for actions configuration parameters has been put in place
  with this release; it is now possible to provide configuration values, which
  will be accessible through the ActionContext and through the tag library,
  under the "configuration" scope.
================================================================================
VERSION 0.46.0 (released on 2013-09-21)
This is a mostly a bugfix and stability release.
--------------------------------------------------------------------------------
BUG:
  A bug was introduced with previous version 0.43.0 whereby whenever the INITIAL
  rendering was to be performed by an action target (e.g. when the portlet.xml
  contained something like
  
       <init-parameter>
  	     <name>strutlets:view-home</name>
  	     <value>MyAction!myRenderMethod</value>
       </init-parameter>
 
  ) the portlet initial rendering would fail with a null pointer exception.
--------------------------------------------------------------------------------
ENHANCEMENT:
  In case the portlet control flow is misconfigured (e.g. there's a chain of 
  action target invocations is erroneously broken and a target has no 
  indication of how to proceed for a given result, this will be detected by the 
  framework at runtime and signalled through a StrutletsException reporting 
  a clear informational message ("Action target X upon result Y provides no
  information about how to proceed, please check your annotations") instead
  of failing with a generic (e.g. null pointer) exception.     
================================================================================  
VERSIONS 0.44.0.ALPHA and 0.45.0.ALPHA (released on 2013-09-20)
This is a tentative enhancement release.
--------------------------------------------------------------------------------
ENHANCEMENT:
The ActionController's "render()" method was almost completely rewritten to 
support action targets in JSP results.
Up to version 0.43.0, the framework did not support the possibility of letting
an action target return another action targets as its renderer.This means that
you could NOT do something like this:

@Invocable(
	results = {
		@Result(value = "SUCCESS", data = "MyAction!myPresentationMethod") <<<
	}
)
public String myBusinessMethod() { ... }

that is, having a business method that, once it is done, forwards control to a 
presentation method which will add its part of logic to the overall processing
and then, only at the end of a (possibly long) chain of action method calls,
passes control over to a JSP to finally print out to the user.
The ActionController's render() methoid had to be rewritten from a linear form
(where there was a chain of if... else...) to a loop, whereby some intermediate
values are tested until the framework detects that no more action invocations 
are needed because it has hit a JSP- (or a JSON-, or an XML-, for that matters) 
final result, and it can proceed to actual rendering of the response.
Thus, as long as an action target returns another action target as its renderer, 
the call will be recursed; as soon as it is something that does not look like
an action target the flow of control exits the recurring loop and the outcome
of the last action target invocation is passed on to te appropriate renderer
to do its job. 
These release could be buggy: the very CORE of the framework has been touched 
and not thoroughly tested yet: use with caution!
--------------------------------------------------------------------------------
ENHANCEMENT:
  Initialisation parameter are given a new name in order to make it clear which
  parameters belong to strutlets and which do not in the portlet.xml. Each 
  parameter retains its legacy name, but a new "sanityCheck()" method has been 
  added to the portlet startup so that usage of legacy parameters names is 
  printed out as a warning message.
--------------------------------------------------------------------------------
ENHANCEMENT:
  It is now possible to declare more than one Java package for both actions
  and renderers, through two new parameters that supersed (and will eventually
  replace altogether) the now deprecated "action.java.package" and 
  "renderers.java.package" portlet.xml initialisation parameters. 
  It is strongly advised to move over to 
   * "strutlets:actions-packages" for actions (comma-separated list of packages)
   * "strutlets:renderers-packages" for renderers (idem)
  A warning message will be printed out at portlet startup if legacy parameters 
  are still being used.
================================================================================  
VERSION 0.43.0 (released on 2013-09-19)
This is an enhancement release.
--------------------------------------------------------------------------------
ENHANCEMENT:
  Added the @InOut annotation, to make input/output parameters easier to use when
  no scope change is needed.
================================================================================  
VERSION 0.42.1 (released on 2013-09-19)
This is a bugfix release.
--------------------------------------------------------------------------------
BUG:
  When accessing objects in APPLICATION scope the findValiInScopes() method would
  fail with a "Not yet implemented" exception. A missing "break" in a switch 
  construct caused the control flow to fall through and hit the unsupported (so 
  far) CONFIGURATION scope.
================================================================================
VERSION 0.42.0 (released on 2013-09-17)
This is an enhancement, stability and performance release. As a matter of fact, 
with this release there begins to be very little in common with Struts2 apart 
from the interceptors mechanism.
--------------------------------------------------------------------------------
PERFORMANCE:
  The ActionProxyFactory generated different code depending on whether the action
  does nor does not have instance fields: in the former case it outputs code that
  instantiates a new object for each invocation; in the latter it allocates a 
  single static instance at deployment time and then returns a reference to the 
  same singleton instance. This should reduce object creation, reduce heap 
  fragmentation under heavy load and increase performance for stateless actions.
FEATURE:
  Added methods to create action, render and resource URLs to ActionContext.
FEATURE: 
  Added methods to retrieve, enumerate, check and store portlet preferences 
  through ActionContext.
FEATURE:
  Remove possibility to decorate class fields in with @OIn and @Out annotations.
  Inputs and outputs are now only conveyed through annotated method arguments. 
  This enables the use of stateless actions, with the aforementioned performance
  benefits.
DEBUGGING:
  Added check on existence of no-arg constructor on action classes, for the sake
  of easier debugging: the portlet will not be instantiated, so errors will occur
  at deployment time, not at runtime.
STABILITY:
  Added a check that only concrete classes are added to the target registry; if
  an abstract class in annotated with @Action its methods will not go into the
  registry, but they may if the abstract class is extended a concrete @Action.
  If the abstract class is a superclass of many @Action's, then the same methods
  may appear multiple times in the registry, under the different concrete classes'
  account. 
================================================================================
VERSION 0.40.0 (released on 2013-09-15)
This is an enhancements release; it is not backward compatible, so be careful 
when upgrading. The change was necessary to allow for inheritance of Actions.
With "inheritance-based" scanning (actions must extend the Action abstract class)
the scanning mechanism was not able to identify classes that inherited from
the base abstract class through a chain of intermediate classes.
--------------------------------------------------------------------------------
FEATURE:
  The framework now scans for types annotated with @Action, instead of looking
  for classes inheriting from Action; the @Interceptors annotation has been 
  removed.
FEATURE:
  Actions can now declare an alias in their annotation, in order to allow internal
  classes names to be mapped externally as aliases, e.g.
    @Action(
      alias = "MyAlias",
      interceptors = "my-custom-stack"
    )
    public class MyInnerClass { ... }
  Action targets can now be expressed as "MyAlias!myMethod", avoid exposure of 
  the internal class name.
================================================================================
VERSION 0.33.0 (released on 2013-09-11)
This is a bugfix release.
--------------------------------------------------------------------------------
BUG:
  The @Out annotated parameters did not work if the wrapped type was itself a 
  generic container such as List<T>.
================================================================================  
VERSION 0.30.0 (released on 2013-09-08)
This is an enhancement release.
--------------------------------------------------------------------------------
FEATURE:
  The framework now provides automatic mapping of annotated OUTPUT parameters; 
  you can now annotate a method as follows:
    @Invocable
    public String myMethod(
                     @In ("param1") int arg1,
                     @Out("param2", scope = Scope.PORTLET) $<String> arg2
                )
  Please note that input parameters can have any type, whereas output and input/
  output parameters must be passed as references (instances of $<your type>).
  The framework will automatically pick @In values from the appropriate scopes,
  and store @Out values into the right scope once the method is done.
================================================================================ 
VERSION 0.22.0 (released on 2013-08-27)
This is a bugfix release, with a few adjustments to how request-scoped attributes
are handled, to work around some funny behaviour on Liferay's part. 
--------------------------------------------------------------------------------
BUG:
   When two or more Strutlets portlets are displayed on the same page, and each 
   of them sets parameters at Scope.REQUEST into the session, Liferay may end up 
   mixing them up. Strangely enough, the Dumper interceptor shows the Sessions 
   are distinct and different, but getter methods end up grabbing random data.
   The fix includes a "namespacing" for request-scoped attributes: now the key
   is portlet-specific. In order to make it available to taglib classes too
   (which run in JSP and are not aware of the portlet they belong to), a new
   thread-local storage (Portlet.java) has been added, which provides a reference
   to the ActionController.
--------------------------------------------------------------------------------
PRIORITY:
   HIGH 
================================================================================
VERSION 0.20.0 (released on 2013-06-23)
With this release the framework is approaching full maturity: it adds AOP and
runtime initialisation, plus some restructuring of the Target* classes code.
--------------------------------------------------------------------------------
FEATURE:
	Aspect Oriented Programming to support inline parameters for business methods:
	action methods can now have a complex signature such as:
		public String myMethod(@In(scope = Scope.FORM } String param) throws ...
	thanks to a layer that dynamically generates a static stub method that will 
	perform parameter retrieval (according to the annotation hints) and then
	proceed to calling the actual method on the action instance. All of this is 
	performed with no runtime overhead: all necessary code is dynamically compiled
	and injected into the class loader at bootstrap, so there's no overhead at
	invocation time, and no reflection except for the instantiation of the action
	object (which couldn't be done otherwise) and the single stub method 
	invocation. This provides easier access to parameters and a performance boost
	with respect to the Inputs interceptor, while preserving full backward 
	compatibility.
PRIORITY:
	HIGH
--------------------------------------------------------------------------------
FEATURE/BUG:
	Runtime environment detection: the framework will detect the current runtime 
	and execute some container-specific initialisation code. Needed to properly
	initialise the Vfs URL handling on JBoss.
PRIORITY:
	HIGH
================================================================================
VERSION 0.11.2 (released on 2013-06-04)
--------------------------------------------------------------------------------
FEATURE:
	Check if multiple instances of a Portlet can be instantiated by the portlet 
	container (by the standard) and, if so, provide a way to optimise initial
	registry loading by sharing configuration info across portlet instances, e.g. 
	by having registries as per portlet singletons.
PRIORITY:
	LOW
--------------------------------------------------------------------------------
FEATURE:
	Set the Content-Type in non-JSP renderers: JSON renderer and XML renderer
	should set the response MIME type, whereas JSP renderer must not (this is 
	optional since JSR-286).
PRIORITY:
	MEDIUM
================================================================================
VERSION 0.11.1 (released on 2013-06-02)
--------------------------------------------------------------------------------
FEATURE: 
  Started backlog tracking.
PRIORITY:
  LOW
================================================================================
VERSION 0.11.0 (released on 2013-06-01)
--------------------------------------------------------------------------------
FEATURE: 
	Implemented the BusinessContext and PresentationContext classes to shield
	unavailable functionalities away from developers at compile time. Developers
	can now choose to access portal functionalities through the classic
	ActionContext (which provides all the available functionalities and may throw
	an exception at runtime if something is invoked in the wrong phase) or a 
	restricted view, e.g. the BusinessContext, which filters methods that would 
	throw at runtime if invoked in one of the "business" phases: ACTION and EVENT 
	[thanks to A.Aidala and R.Longobardi for pointing out this improvement].
PRIORITY:
	MEDIUM
--------------------------------------------------------------------------------
BUGFIX: 
	Fixed a bug in the @Outputs interceptor that caused Strings to be stored as 
	String[] in the Request scope [thanks to R.Sorbi for providing feedback on 
	this issue].
PRIORITY:
	HIGH
--------------------------------------------------------------------------------  
BUGFIX: 
	Improved handling of complex object types as render parameters in the 
	@Output interceptor.
PRIORITY:
	HIGH
================================================================================  
