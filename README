VERSION 0.40.0 (released on 2013-09-15)
This is an enhancements release; it is not backward compatible, so be careful 
when upgrading. The change was necessary to allow for inheritance of Actions.
With "inheritance-based" scanning (actions must extend the Action abstract class)
the scanning mechanism was not able to identify classes that inherited from
the base abstract class through a chain of intermediate classes.
--------------------------------------------------------------------------------
FEATURE:
  The framework now scans for types annotated with @Action, instead of looking
  for classes inheriting from Action. 
================================================================================
VERSION 0.33.0 (released on 2013-09-11)
This is a bugfix release.
--------------------------------------------------------------------------------
BUG:
  The @Out annotated parameters did not work if the wrapped type was itself a 
  generic container such as List<T>.
================================================================================  
VERSION 0.30.0 (released on 2013-09-08)
This is an enhancement release.
--------------------------------------------------------------------------------
FEATURE:
  The framework now provides automatic mapping of annotated OUTPUT parameters; 
  you can now annotate a method as follows:
    @Invocable
    public String myMethod(
                     @In ("param1") int arg1,
                     @Out("param2", scope = Scope.PORTLET) $<String> arg2
                )
  Please note that input parameters can have any type, whereas output and input/
  output parameters must be passed as references (instances of $<your type>).
  The framework will automatically pick @In values from the appropriate scopes,
  and store @Out values into the right scope once the method is done.
================================================================================ 
VERSION 0.22.0 (released on 2013-08-27)
This is a bugfix release, with a few adjustments to how request-scoped attributes
are handled, to work around some funny behaviour on Liferay's part. 
--------------------------------------------------------------------------------
BUG:
   When two or more Strutlets portlets are displayed on the same page, and each 
   of them sets parameters at Scope.REQUEST into the session, Liferay may end up 
   mixing them up. Strangely enough, the Dumper interceptor shows the Sessions 
   are distinct and different, but getter methods end up grabbing random data.
   The fix includes a "namespacing" for request-scoped attributes: now the key
   is portlet-specific. In order to make it available to taglib classes too
   (which run in JSP and are not aware of the portlet they belong to), a new
   thread-local storage (Portlet.java) has been added, which provides a reference
   to the ActionController.
--------------------------------------------------------------------------------
PRIORITY:
   HIGH 
================================================================================
VERSION 0.20.0 (released on 2013-06-23)
With this release the framework is approaching full maturity: it adds AOP and
runtime initialisation, plus some restructuring of the Target* classes code.
--------------------------------------------------------------------------------
FEATURE:
	Aspect Oriented Programming to support inline parameters for business methods:
	action methods can now have a complex signature such as:
		public String myMethod(@In(scope = Scope.FORM } String param) throws ...
	thanks to a layer that dynamically generates a static stub method that will 
	perform parameter retrieval (according to the annotation hints) and then
	proceed to calling the actual method on the action instance. All of this is 
	performed with no runtime overhead: all necessary code is dynamically compiled
	and injected into the class loader at bootstrap, so there's no overhead at
	invocation time, and no reflection except for the instantiation of the action
	object (which couldn't be done otherwise) and the single stub method 
	invocation. This provides easier access to parameters and a performance boost
	with respect to the Inputs interceptor, while preserving full backward 
	compatibility.
PRIORITY:
	HIGH
--------------------------------------------------------------------------------
FEATURE/BUG:
	Runtime environment detection: the framework will detect the current runtime 
	and execute some container-specific initialisation code. Needed to properly
	initialise the Vfs URL handling on JBoss.
PRIORITY:
	HIGH
================================================================================
VERSION 0.11.2 (released on 2013-06-04)
--------------------------------------------------------------------------------
FEATURE:
	Check if multiple instances of a Portlet can be instantiated by the portlet 
	container (by the standard) and, if so, provide a way to optimise initial
	registry loading by sharing configuration info across portlet instances, e.g. 
	by having registries as per portlet singletons.
PRIORITY:
	LOW
--------------------------------------------------------------------------------
FEATURE:
	Set the Content-Type in non-JSP renderers: JSON renderer and XML renderer
	should set the response MIME type, whereas JSP renderer must not (this is 
	optional since JSR-286).
PRIORITY:
	MEDIUM
================================================================================
VERSION 0.11.1 (released on 2013-06-02)
--------------------------------------------------------------------------------
FEATURE: 
  Started backlog tracking.
PRIORITY:
  LOW
================================================================================
VERSION 0.11.0 (released on 2013-06-01)
--------------------------------------------------------------------------------
FEATURE: 
	Implemented the BusinessContext and PresentationContext classes to shield
	unavailable functionalities away from developers at compile time. Developers
	can now choose to access portal functionalities through the classic
	ActionContext (which provides all the available functionalities and may throw
	an exception at runtime if something is invoked in the wrong phase) or a 
	restricted view, e.g. the BusinessContext, which filters methods that would 
	throw at runtime if invoked in one of the "business" phases: ACTION and EVENT 
	[thanks to A.Aidala and R.Longobardi for pointing out this improvement].
PRIORITY:
	MEDIUM
--------------------------------------------------------------------------------
BUGFIX: 
	Fixed a bug in the @Outputs interceptor that caused Strings to be stored as 
	String[] in the Request scope [thanks to R.Sorbi for providing feedback on 
	this issue].
PRIORITY:
	HIGH
--------------------------------------------------------------------------------  
BUGFIX: 
	Improved handling of complex object types as render parameters in the 
	@Output interceptor.
PRIORITY:
	HIGH
================================================================================  
